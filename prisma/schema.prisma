generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  refresh_token_expires_at Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime            @default(now())
  accounts           Account[]
  libraryEntries     LibraryEntry[]
  lists              List[]
  sessions           Session[]
  tags               Tag[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Paper {
  id             Int            @id @unique @default(autoincrement())
  arxivId        String         @unique
  submitter      String?
  authors        String?
  title          String?
  comments       String?
  journalRef     String?
  doi            String?
  reportNo       String?
  categories     String?
  license        String?
  abstract       String?
  updateDate     DateTime?
  libraryEntries LibraryEntry[]
  lists          ListEntry[]
  tags           TagOnPaper[]

  @@index([updateDate], map: "Paper_updateDate_key")
}

model LibraryEntry {
  paperId    Int
  userId     String
  wantToRead Boolean @default(false)
  paper      Paper   @relation(fields: [paperId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([paperId, userId])
  @@index([userId])
  @@index([paperId])
}

model List {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  userId    String
  public    Boolean     @default(false)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries   ListEntry[]

  @@unique([userId, name])
  @@index([userId])
}

model ListEntry {
  listId  String
  paperId Int
  list    List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  paper   Paper  @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@id([listId, paperId])
  @@index([listId])
  @@index([paperId])
}

model Tag {
  id         String       @id @default(cuid())
  userId     String
  name       String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  TagOnPaper TagOnPaper[]

  @@unique([userId, name])
  @@index([userId])
}

model TagOnPaper {
  tagId   String
  paperId Int
  paper   Paper  @relation(fields: [paperId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, paperId])
  @@index([tagId])
  @@index([paperId])
}
